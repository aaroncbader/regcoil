#!/usr/bin/env python
print "usage: regcoilPlot regcoil_out.XXX.nc"

import matplotlib as mpl
import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D
#from matplotlib import cm
import numpy as np
from scipy.io import netcdf
from scipy.interpolate import interp1d
import sys
import math

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the regcoil_out.XXX.nc file."
    exit(1)

def maximizeWindow():
    # Maximize window. The command for this depends on the backend.
    mng = plt.get_current_fig_manager()
    try:
        mng.resize(*mng.window.maxsize())
    except AttributeError:
        try:
            mng.window.showMaximized()
        except AttributeError:
            pass

f = netcdf.netcdf_file(sys.argv[1],'r',mmap=False)
nfp = f.variables['nfp'][()]
ntheta_plasma = f.variables['ntheta_plasma'][()]
ntheta_coil = f.variables['ntheta_coil'][()]
nzeta_plasma = f.variables['nzeta_plasma'][()]
nzeta_coil = f.variables['nzeta_coil'][()]
nzetal_plasma = f.variables['nzetal_plasma'][()]
nzetal_coil = f.variables['nzetal_coil'][()]
theta_plasma = f.variables['theta_plasma'][()]
theta_coil = f.variables['theta_coil'][()]
zeta_plasma = f.variables['zeta_plasma'][()]
zeta_coil = f.variables['zeta_coil'][()]
zetal_plasma = f.variables['zetal_plasma'][()]
zetal_coil = f.variables['zetal_coil'][()]
r_plasma  = f.variables['r_plasma'][()]
r_coil  = f.variables['r_coil'][()]
xm_coil = f.variables['xm_coil'][()]
xn_coil = f.variables['xn_coil'][()]
mnmax_coil = f.variables['mnmax_coil'][()]
nalpha = f.variables['nalpha'][()]
alpha = f.variables['alpha'][()]
chi2_B = f.variables['chi2_B'][()]
chi2_J = f.variables['chi2_J'][()]
single_valued_current_potential_thetazeta = f.variables['single_valued_current_potential_thetazeta'][()]
current_potential = f.variables['current_potential'][()]
J2 = f.variables['J2'][()]
Bnormal_from_plasma_current = f.variables['Bnormal_from_plasma_current'][()]
Bnormal_from_net_coil_currents = f.variables['Bnormal_from_net_coil_currents'][()]
Bnormal_total = f.variables['Bnormal_total'][()]
# = f.variables[''][()]

print "ntheta_plasma: ",ntheta_plasma
print "nzetal_plasma: ",nzetal_plasma
print "r_plasma.shape: ",r_plasma.shape
print "single_valued_current_potential_thetazeta.shape: ",single_valued_current_potential_thetazeta.shape
print "Bnormal_total.shape: ",Bnormal_total.shape

f.close()


########################################################
# For 3D plotting, 'close' the arrays in u and v
########################################################

r_plasma  = np.append(r_plasma,  r_plasma[[0],:,:], axis=0)
r_plasma  = np.append(r_plasma,  r_plasma[:,[0],:], axis=1)
zetal_plasma = np.append(zetal_plasma,nfp)

r_coil  = np.append(r_coil,  r_coil[[0],:,:], axis=0)
r_coil  = np.append(r_coil,  r_coil[:,[0],:], axis=1)
zetal_coil = np.append(zetal_coil,nfp)

########################################################
# Extract cross-sections of the 3 surfaces at several toroidal angles
########################################################

def getCrossSection(rArray, zetal_old, zeta_new):
    zetal_old = np.concatenate((zetal_old-nfp,zetal_old))
    rArray = np.concatenate((rArray,rArray),axis=0)


    print "zetal_old shape:",zetal_old.shape
    print "rArray shape:",rArray.shape

    x = rArray[:,:,0]
    y = rArray[:,:,1]
    z = rArray[:,:,2]
    R = np.sqrt(x**2 + y**2)


    ntheta = z.shape[1]
    nzeta_new = len(zeta_new)
    R_slice = np.zeros([nzeta_new,ntheta])
    Z_slice = np.zeros([nzeta_new,ntheta])
    for itheta in range(ntheta):
        interpolator = interp1d(zetal_old, R[:,itheta])
        R_slice[:,itheta] = interpolator(zeta_new)
        interpolator = interp1d(zetal_old, z[:,itheta])
        Z_slice[:,itheta] = interpolator(zeta_new)

    return R_slice, Z_slice

zeta_slices = np.array([0, 0.25, 0.5, 0.75])*2*np.pi/nfp
R_slice_plasma, Z_slice_plasma = getCrossSection(r_plasma, zetal_plasma, zeta_slices)
R_slice_coil, Z_slice_coil = getCrossSection(r_coil, zetal_coil, zeta_slices)

########################################################
# Now make plot of surfaces at given toroidal angle
########################################################

figureNum = 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

numRows = 2
numCols = 2

Rmin = R_slice_coil.min()
Rmax = R_slice_coil.max()
Zmin = Z_slice_coil.min()
Zmax = Z_slice_coil.max()

for whichPlot in range(4):
    plt.subplot(numRows,numCols,whichPlot+1)
    zeta = zeta_slices[whichPlot]
    plt.plot(R_slice_coil[whichPlot,:], Z_slice_coil[whichPlot,:], 'b.-', label='coil')
    plt.plot(R_slice_plasma[whichPlot,:], Z_slice_plasma[whichPlot,:], 'r.-', label='plasma')
    plt.gca().set_aspect('equal',adjustable='box')
    plt.legend(fontsize='x-small')
    plt.title('zeta='+str(zeta))
    plt.xlabel('R')
    plt.ylabel('Z')
    plt.xlim([Rmin,Rmax])
    plt.ylim([Zmin,Zmax])

plt.tight_layout()


########################################################
# Pick the alpha values to show in the 2D plots
########################################################

max_nalpha_for_contour_plots = 16
numPlots = min(nalpha,max_nalpha_for_contour_plots)
ialpha_to_plot = np.sort(list(set(map(int,np.linspace(1,nalpha,numPlots)))))
numPlots = len(ialpha_to_plot)
print "ialpha_to_plot:",ialpha_to_plot

########################################################
# Now make plot of chi^2 over alpha scan
########################################################

figureNum += 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

numRows = 2
numCols = 3

plt.subplot(numRows,numCols,1)
plt.loglog(chi2_J,chi2_B,'.-r')
plt.xlabel('chi2_J')
plt.ylabel('chi2_B')
for j in range(numPlots):
    plt.plot(chi2_J[ialpha_to_plot[j]-1], chi2_B[ialpha_to_plot[j]-1],'ob')

if nalpha>1:
    plt.subplot(numRows,numCols,2)
    plt.loglog(alpha,chi2_B,'.-r')
    plt.xlabel('alpha')
    plt.ylabel('chi2_B')
    for j in range(numPlots):
        plt.plot(alpha[ialpha_to_plot[j]-1], chi2_B[ialpha_to_plot[j]-1],'ob')

plt.subplot(numRows,numCols,3)
plt.semilogy(alpha,chi2_B,'.-r')
plt.xlabel('alpha')
plt.ylabel('chi2_B')
for j in range(numPlots):
    plt.plot(alpha[ialpha_to_plot[j]-1], chi2_B[ialpha_to_plot[j]-1],'ob')

if nalpha>1:
    plt.subplot(numRows,numCols,5)
    plt.loglog(alpha,chi2_J,'.-r')
    plt.xlabel('alpha')
    plt.ylabel('chi2_J')
    for j in range(numPlots):
        plt.plot(alpha[ialpha_to_plot[j]-1], chi2_J[ialpha_to_plot[j]-1],'ob')

plt.subplot(numRows,numCols,6)
plt.semilogy(alpha,chi2_J,'.-r')
plt.xlabel('alpha')
plt.ylabel('chi2_J')
for j in range(numPlots):
    plt.plot(alpha[ialpha_to_plot[j]-1], chi2_J[ialpha_to_plot[j]-1],'ob')

plt.tight_layout()

########################################################
# Prepare for plotting current potential
########################################################

numCols = int(np.ceil(np.sqrt(numPlots)))
numRows = int(np.ceil(numPlots*1.0/numCols))

mpl.rc('xtick',labelsize=7)
mpl.rc('ytick',labelsize=7)

numContours = 20

########################################################
# Plot single-valued part of current potential
########################################################

figureNum += 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

for whichPlot in range(numPlots):
    plt.subplot(numRows,numCols,whichPlot+1)
    plt.contourf(zeta_coil, theta_coil, np.transpose(single_valued_current_potential_thetazeta[ialpha_to_plot[whichPlot]-1,:,:]), numContours)
    plt.colorbar()
    plt.xlabel('zeta',fontsize='x-small')
    plt.ylabel('theta',fontsize='x-small')
    plt.title('alpha='+str(alpha[ialpha_to_plot[whichPlot]-1]),fontsize='x-small')

plt.tight_layout()
plt.figtext(0.5,0.99,"Single-valued part of the current potential",horizontalalignment='center',verticalalignment='top',fontsize='small')

########################################################
# Plot total current potential
########################################################

figureNum += 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

for whichPlot in range(numPlots):
    plt.subplot(numRows,numCols,whichPlot+1)
    plt.contourf(zeta_coil, theta_coil, np.transpose(current_potential[ialpha_to_plot[whichPlot]-1,:,:]), numContours)
    plt.colorbar()
    plt.xlabel('zeta',fontsize='x-small')
    plt.ylabel('theta',fontsize='x-small')
    plt.title('alpha='+str(alpha[ialpha_to_plot[whichPlot]-1]),fontsize='x-small')

plt.tight_layout()
plt.figtext(0.5,0.99,"Total current potential",horizontalalignment='center',verticalalignment='top',fontsize='small')

########################################################
# Plot J^2
########################################################

figureNum += 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

for whichPlot in range(numPlots):
    plt.subplot(numRows,numCols,whichPlot+1)
    plt.contourf(zeta_coil, theta_coil, np.transpose(J2[ialpha_to_plot[whichPlot]-1,:,:]), numContours)
    plt.colorbar()
    plt.xlabel('zeta',fontsize='x-small')
    plt.ylabel('theta',fontsize='x-small')
    plt.title('alpha='+str(alpha[ialpha_to_plot[whichPlot]-1]),fontsize='x-small')

plt.tight_layout()
plt.figtext(0.5,0.99,"J^2",horizontalalignment='center',verticalalignment='top',fontsize='small')

########################################################
# Plot Bnormal
########################################################

figureNum += 1
fig = plt.figure(figureNum)
fig.patch.set_facecolor('white')

numPlots += 2

numCols = int(np.ceil(np.sqrt(numPlots)))
numRows = int(np.ceil(numPlots*1.0/numCols))

plt.subplot(numRows,numCols,1)
plt.contourf(zeta_plasma, theta_plasma, np.transpose(Bnormal_from_plasma_current), numContours)
plt.colorbar()
plt.xlabel('zeta',fontsize='x-small')
plt.ylabel('theta',fontsize='x-small')
plt.title('From plasma current',fontsize='x-small')

plt.subplot(numRows,numCols,2)
plt.contourf(zeta_plasma, theta_plasma, np.transpose(Bnormal_from_net_coil_currents), numContours)
plt.colorbar()
plt.xlabel('zeta',fontsize='x-small')
plt.ylabel('theta',fontsize='x-small')
plt.title('From net coil currents',fontsize='x-small')


for whichPlot in range(numPlots-2):
    plt.subplot(numRows,numCols,whichPlot+3)
    plt.contourf(zeta_plasma, theta_plasma, np.transpose(Bnormal_total[ialpha_to_plot[whichPlot]-1,:,:]), numContours)
    plt.colorbar()
    plt.xlabel('zeta',fontsize='x-small')
    plt.ylabel('theta',fontsize='x-small')
    plt.title('Total, alpha='+str(alpha[ialpha_to_plot[whichPlot]-1]),fontsize='x-small')

plt.tight_layout()
plt.figtext(0.5,0.99,"Bnormal",horizontalalignment='center',verticalalignment='top',fontsize='small')



########################################################
# Now make 3D surface plot
########################################################

#figureNum += 1
#fig = plt.figure(figureNum)
#fig.patch.set_facecolor('white')
#ax = fig.gca(projection='3d')
#ax.plot_surface(r_plasma[:,:,0], r_plasma[:,:,1], r_plasma[:,:,2], rstride=1, cstride=1, color='r',linewidth=0)
#
#maxIndex = int(nvl_middle*0.7)
#ax.plot_surface(r_middle[:maxIndex,:,0], r_middle[:maxIndex,:,1], r_middle[:maxIndex,:,2], rstride=1, cstride=1, color='m',linewidth=0)
#
#maxIndex = int(nvl_outer*0.55)
#minIndex = int(nvl_outer*0.15)
#ax.plot_surface(r_outer[minIndex:maxIndex,:,0], r_outer[minIndex:maxIndex,:,1], r_outer[minIndex:maxIndex,:,2], rstride=1, cstride=1, color='b',linewidth=0)
#
#plotLMax = r_outer.max()
#ax.auto_scale_xyz([-plotLMax, plotLMax], [-plotLMax, plotLMax], [-plotLMax, plotLMax])



plt.show()

