#!/usr/bin/env python

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import inspect, os
from scipy.io import netcdf
import sys

myname = inspect.getfile(inspect.currentframe())
print "This is " + myname
print "Usage:"
print "  "+myname+" <List of 1 or more regcoil_out.XXX.nc files>"
print 

if len(sys.argv) < 2:
    print "Error! You must list at least one regcoil_out.XXX.nc file as a command-line argument."
    exit(1)

def maximizeWindow():
    # Maximize window. The command for this depends on the backend.
    mng = plt.get_current_fig_manager()
    try:
        mng.resize(*mng.window.maxsize())
    except AttributeError:
        try:
            mng.window.showMaximized()
        except AttributeError:
            pass

alpha_many = []
chi2_B_many = []
chi2_J_many = []
max_alpha = 0

for whichFile in range(1,len(sys.argv)):
    filename = sys.argv[whichFile]
    f = netcdf.netcdf_file(filename,'r',mmap=False)
    alpha = f.variables['alpha'][()]
    alpha_many.append(alpha)
    max_alpha = np.max((max_alpha,np.max(alpha)))
    print "max_alpha:",max_alpha
    chi2_B_many.append(f.variables['chi2_B'][()])
    chi2_J_many.append(f.variables['chi2_J'][()])
    f.close()

    print "Read data from file "+filename



##########################################################
# Make plot
##########################################################

matplotlib.rcParams.update({'font.size': 9})
fig = plt.figure(1)
fig.patch.set_facecolor('white')

numRows=2;
numCols=3;

plt.subplot(numRows,numCols,1)
for whichFile in range(len(sys.argv)-1):
    filename = sys.argv[whichFile+1]
    plt.loglog(chi2_J_many[whichFile],chi2_B_many[whichFile],'.-',label=filename)
plt.xlabel('chi2_J')
plt.ylabel('chi2_B')
#plt.legend(frameon=False,prop=dict(size=8),loc=0)
plt.grid(True)

plt.subplot(numRows,numCols,2)
for whichFile in range(len(sys.argv)-1):
    filename = sys.argv[whichFile+1]
    plt.loglog(alpha_many[whichFile],chi2_B_many[whichFile],'.-',label=filename)
plt.xlabel('alpha')
plt.ylabel('chi2_B')
#plt.legend(frameon=False,prop=dict(size=8),loc=0)
plt.grid(True)

plt.subplot(numRows,numCols,3)
for whichFile in range(len(sys.argv)-1):
    filename = sys.argv[whichFile+1]
    plt.semilogy(alpha_many[whichFile],chi2_B_many[whichFile],'.-',label=filename)
plt.xlabel('alpha')
plt.ylabel('chi2_B')
#plt.legend(frameon=False,prop=dict(size=8),loc=0)
plt.grid(True)
plt.xlim(-max_alpha*0.05,max_alpha*1.05)

plt.subplot(numRows,numCols,5)
for whichFile in range(len(sys.argv)-1):
    filename = sys.argv[whichFile+1]
    plt.loglog(alpha_many[whichFile],chi2_J_many[whichFile],'.-',label=filename)
plt.xlabel('alpha')
plt.ylabel('chi2_J')
#plt.legend(frameon=False,prop=dict(size=8),loc=0)
plt.grid(True)

plt.subplot(numRows,numCols,6)
for whichFile in range(len(sys.argv)-1):
    filename = sys.argv[whichFile+1]
    plt.semilogy(alpha_many[whichFile],chi2_J_many[whichFile],'.-',label=filename)
plt.xlabel('alpha')
plt.ylabel('chi2_J')
plt.legend(frameon=False,prop=dict(size=8),loc=0)
plt.grid(True)
plt.xlim(-max_alpha*0.05,max_alpha*1.05)

titleString = "Plot generated by "+ os.path.abspath(inspect.getfile(inspect.currentframe())) + "\nRun in "+os.getcwd()
plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

maximizeWindow()

plt.show()

