#!/usr/bin/env python

# This python script checks the output file for an example to 
# see if the results are close to expected values.  This script may be
# run directly, and it is also called when "make test" is run from the
# main BDISTRIB directory.

execfile('../testsCommon.py')

numFailures = 0

f = readOutputFile()

variableName = 'alpha'
data = f.variables[variableName][()]
desiredTolerance = 1e-12
numFailures += arrayShouldBe(data, [0, 1e-15, 1.33352143216332e-15, 1.77827941003892e-15,\
                                    2.37137370566166e-15, 3.16227766016838e-15, 4.21696503428582e-15,\
                                    5.62341325190349e-15, 7.49894209332456e-15, 1e-14],desiredTolerance)


variableName = 'chi2_B'
data = f.variables[variableName][()]
desiredTolerance = 1e-2
# Aside from the alpha=0 case, which is pathological, the other values of chi2_B should be within a few percent of
# the results for the original angle, copied below:
numFailures += arrayShouldBe(data[1:], [ 0.174519878306313, 0.233148551834137, \
    0.310446213587783, 0.411565852326815, 0.542616084841207, \
    0.710568315783369, 0.922890554110523, 1.18673864681126, 1.50770781013225],desiredTolerance)

variableName = 'chi2_J'
data = f.variables[variableName][()]
desiredTolerance = 1e-4
numFailures += arrayShouldBe(data[1:], [1.74957088182873e+15, 1.6989658516062e+15,\
    1.64892520707378e+15, 1.59982527129183e+15, 1.55209554042516e+15,\
    1.50621123410416e+15, 1.46269693947801e+15, 1.42212837760326e+15,\
    1.38509938973785e+15], desiredTolerance)

variableName = 'max_Bnormal'
data = f.variables[variableName][()]
desiredTolerance = 1e-3
numFailures += arrayShouldBe(data[1:], [ 0.117555544291034, 0.134561224876993,\
    0.153923792979921, 0.176347144447289, 0.201603899107085,\
    0.229977435728317, 0.261839981656698, 0.296625161466877, 0.333988791941713], desiredTolerance)

variableName = 'max_J'
data = f.variables[variableName][()]
desiredTolerance = 1e-3
numFailures += arrayShouldBe(data[1:], [ 8824481.60102707, 8355450.23653953,\
    7884212.39105115, 7412969.17310808, 6945281.57578389, 6485916.75531679,\
    6040435.92861007, 5614638.75966927, 5214018.48872153], desiredTolerance)

variableName = 'single_valued_current_potential_mn'
data = f.variables[variableName][()]
print data.shape
desiredTolerance = 1e-4
numFailures += arrayShouldBe(data[0,:], [-2150702.43371571, -1952104.80644757, 5971452.02717117, -5450539.5062297,
   754053.2071164, 4225740.24432034, -4895850.21300665, 3149132.46135463,
    -2527565.73112939, 4507372.59486862, -6056629.35259893, 5109920.83201355,
    -680753.238457206, -3366385.66108097, 5778969.02803298,
    -5302693.32593425, 2296350.84313846, 1106394.92794294, -2403087.74538111,
    2555717.93868436, -3391631.72653605, 3780306.78212739, -1729036.15720208,
    -756499.1286887, 2071579.08345295, -3496091.11204201, 4292266.23541845,
    -2453597.54808166, 107566.671083303, 941294.195639994, -599187.244708341,
    172730.204651976, -30115.0717738372, -724287.348156356, 1802082.12536699,
    -532036.214186183, -1290191.75724941, 2683718.08748639,
    -4229575.75777488, 3858369.81155349, -277785.756368222,
    -2741429.37893876, 1699840.10337157, -866490.85755121, 2228381.67856862,
    -2584703.42210054, 2115375.77503455, -677644.396549232,
    -1005694.10810728, 2590954.39598472, -3839294.61188147, 2687199.3695872,
    1347579.28768599, -4136955.91286876, 3271111.90645002, 32930.1333222007,
    -894484.88141616, -1529820.53461497, 2850478.14186534, -1043368.82561964,
    -1646491.21324304, 2065239.97904394, -434945.045985678,
    -570759.477779804, -1250246.42404195, 5994503.46795205, -4907474.0839101,
    -680175.591006384, 6543893.83669157, -6604727.49248863, 103170.442809939,
    5434484.54098524, -6213408.7056547, 4758468.51179498, -6446545.20158684,
    10115439.9338243, -10302944.826668, 4993662.06503334, 1598708.55726574,
    -5786243.5945524, 6915939.83797212, -5387580.70673564, 3082127.45642711,
    -1396667.2871229, 285227.538231654, 296415.992397231, -153436.337214428,
    2665797.36106106, -5193502.81756696, 1514879.68935834, 4560231.2280301,
    -7297174.41960276, 6709238.29195246, -5075023.65069836, 2194386.36848023,
    306334.632785608, -374177.679448887, 128039.487306649, 381371.69946554,
    -1083891.08247674, 1457246.06363266, -1888112.91784983, 411848.93071216,
    1881904.50777241, -1883744.57188709, 1058756.60291755, -1105778.04199285,
    194581.522617176, 2178854.09670147, -2924140.14463886, 2713869.58319272,
    -3209896.15000396, 2563724.43391456, -871010.917096945,
    -811840.218767782, 2421929.11930742, -2222312.43298657, 914173.551361441,
    983035.671452927, -719460.446838491, -880509.869324105, 1867798.86753425,
    -847517.04025431, -867594.161649579, 2169054.93797191, -1087845.71714313,
    -185095.443112161, 144056.859184664, -167240.818089943, 5005381.40962862,
    -11924671.887372, 9192567.99592357, 1700221.78725224, -12211607.5715068,
    12852762.2165301, -4977897.26754798, -3587434.60417505, 6966162.71611132,
    -6774238.71463905, 7551898.68200593, -10198154.3174155, 11195952.2053324,
    -9859312.37737784, 5419856.29121056, 1264429.71889977, -8249068.01851098,
    10946720.4976071, -8519121.69362315, 4371871.66326159, -1715775.47184877,
    148655.510583596, 1710546.00440474, -4366933.25899537, 4522756.13344231,
    -1542661.09206174, -1743202.52676345, 5429861.18220772,
    -7949953.15290641, 6645716.16798925, -3610682.53254788, 656136.366282428,
    58591.6930040146, -32880.2925261408, 20149.2567042912, 398580.268030503,
    -1714558.74274306, 1584537.15087246, 349876.616678995, -1463974.79163021,
    1843469.53233561, -2059144.00389036, 817207.243676637, 1311181.29549846\
                                     ],desiredTolerance,requireSameLength=False)


f.close()
print "numFailures:",numFailures
exit(numFailures > 0)
